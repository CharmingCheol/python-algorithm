""" 플이과정
1.패턴 찾기
 - 수의 길이가 1이면, 맨 뒤에 올 수 있는 각 숫자의 경우의 수는 다음과 같다.
   0  1  2  3  4  5  6  7  8  9
   0  1  1  1  1  1  1  1  1  1
   문제에서는 0으로 시작할 수 없다고 명시되었기 때문
 - 수의 길이가 2일 경우에도, 조금만 투자하면 구할 수 있다.
    > 1 2, 2 3, 3 4, 4 5, 5 6, 6 7, 7 8, 8 9,
    > 9 8, 8 7, 7 6, 6 5, 5 4, 4 3, 3 2, 2 1, 1 0
    > 0  1  2  3  4  5  6  7  8  9
      1  1  2  2  2  2  2  2  2  1
 - 길이가 3까지는 조금만 주의해서 구한다면 경우의 수를 확인 할 수 있다.
   그런데 3 이상의 숫자는 경우의 수가 너무 많기 때문에 불가능하다.
    > 길이가 3에서의 계단수 생성 방식은 다음과 같다
       - 수가 1씩 커지는 경우
       - 수가 1씩 작아지는 경우
       - 수가 1 증가했다가 다시 1 감소하는 경우
       - 수가 1 감소했다가 다시 1 증가하는 경우
    > 위 패턴으로 수를 구하면 다음과 같은 경우의 수를 구하게 된다
       - 1 2 3, 2 3 4, 3 4 5, 4 5 6, 5 6 7, 6 7 8, 7 8 9
       - 9 8 7, 8 7 6, 7 6 5, 6 5 4, 5 4 3, 4 3 2, 3 2 1, 2 1 0
       - 1 2 1, 2 3 2, 3 4 3, 4 5 4, 5 6 5, 6 7 6, 7 8 7, 8 9 8
       - 9 8 9, 8 7 8, 7 6 7, 6 5 6, 5 4 5, 4 3 4, 3 2 3, 2 1 2, 1 0 1
    > 끝 자리의 수를 카운트하면 다음과 같은 표가 나온다
      0  1  2  3  4  5  6  7  8  9
      1  3  3  4  4  4  4  4  3  2

2.점화식 도출하기
 - 길이가 1, 2, 3에서 끝자리의 숫자를 하나의 표로 합치면 다음과 같다
    > 0  1  2  3  4  5  6  7  8  9
      0  1  1  1  1  1  1  1  1  1
      1  1  2  2  2  2  2  2  2  1
      1  3  3  4  4  4  4  4  3  2
 - 위의 표를 보면 각 숫자는 자신의 좌측 상단, 우측 상단 값을 더한 값이 된다.
   예시로 3이 맨 뒷자리에 오려면, 그 앞은 2나 4가 와야 가능함
    > ex) 3행 4열 = 2행 3열 + 2행 5열

3.점화식
 - 끝자리가 0인 경우
    > dp[y][0] = dp[y - 1][1]
 - 끝자리가 9인 경우
    > dp[y][9] = dp[y - 1][8]
 - 그 외
    > dp[y][x] = dp[y - 1][x - 1] + dp[y - 1][x + 1]
"""
import sys

sys.stdin = open("input.txt")

num = int(sys.stdin.readline())
dp = [[0] * 10 for _ in range(num)]
dp[0] = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]

for y in range(1, num):
    for x in range(10):
        if x == 0:
            dp[y][0] = dp[y - 1][1]
        elif x == 9:
            dp[y][9] = dp[y - 1][8]
        else:
            dp[y][x] = dp[y - 1][x - 1] + dp[y - 1][x + 1]

print(sum(dp[num - 1]) % 1000000000)